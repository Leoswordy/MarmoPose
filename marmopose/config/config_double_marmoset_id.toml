# File extension of the calibration videos
video_extension = 'mp4'

# Regular expression to get camera names
# Names of camera should contain: cam1, cam2, cam3, cam4 ...
cam_regex = 'cam(\d)'

# Models in this folder would be used to predict the 2d bodyparts
model_dir = ['D:\Sync\MarmoPose\data\models\230730_204120.centroid.n=1178', 'D:\Sync\MarmoPose\data\models\id_centered_instance_v2']

# All resources should be stored in this directory
project_dir = 'D:\ccq\demos\double_8s'

# The ordered bodyparts name, should be the same as 2D predict model
bodyparts = ['head', 'leftear', 'rightear', 'neck', 'leftelbow', 'rightelbow', 'lefthand', 'righthand', 'spinemid', 'tailbase', 'leftknee', 'rightknee', 'leftfoot', 'rightfoot', 'tailmid', 'tailend']

# The number of instance in the each video
n_tracks = 2


[calibration]
# Type of the board: checkerboard / charuco
board_type = 'checkerboard'

# Number of inner corners per side 
board_size = [11, 8]

# If charuco or checkerboard, square side length
board_square_side_length = 45 # mm

# Whether cameras use fisheye lens
fisheye = true

# Initial calibration file path
# init_file = 'calibration/calibration.toml'

[filter]
enable = true

# Type of filter to apply
type = 'myfilter'

# Labels with score below the threshold are removed
score_threshold = 0.0


[visualization]
# Bodyparts in each list will be connected in order
scheme = [
   ['head', 'leftear', 'neck', 'rightear', 'head'],
   ['neck', 'spinemid', 'tailbase'],
   ['leftfoot', 'leftknee', 'tailbase', 'rightknee', 'rightfoot'],
   ['lefthand', 'leftelbow', 'neck', 'rightelbow', 'righthand'],
   ['tailbase', 'tailmid', 'tailend']
]


[triangulation]
# Whether use 'marmotrack.utils.coordinates.py' to set axes manually
# If False, 3D videos may appear strange because they do not match the actual spatial positions
axes = true

# Labels with score below the threshold are removed
score_threshold = 0.1

# Whether to use 3D optimization
optim = true

# Strength of enforcement of the smoothing constraints
scale_smooth = 5

# Strength of enforcement of the spatial constraints
scale_length = 4
scale_length_weak = 2

# Reprojection error threshold
reproj_error_threshold = 10

# Smooth frames
n_deriv_smooth = 3

# Bodyparts pairs require constraints
constraints = [
   ['head', 'rightear'],
   ['head', 'leftear'],
   ['rightear', 'neck'],
   ['leftear', 'neck'],
   ['neck', 'spinemid'],
   ['spinemid', 'tailbase'],
   ['tailbase', 'tailmid'], 
   ['tailmid', 'tailend'],
   ['neck', 'rightelbow'], 
   ['rightelbow', 'righthand'],
   ['neck', 'leftelbow'], 
   ['leftelbow', 'lefthand'],
   
   ['tailbase', 'rightknee'],
   ['tailbase', 'leftknee'],
   ['rightknee', 'rightfoot'],
   ['leftknee', 'leftfoot']
]

# Bodyparts pairs require weak constraints
constraints_weak = []

